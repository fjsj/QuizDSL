/*
* generated by Xtext
*/
grammar InternalQuiz;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package v1.quiz.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package v1.quiz.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import v1.quiz.services.QuizGrammarAccess;

}

@parser::members {

 	private QuizGrammarAccess grammarAccess;
 	
    public InternalQuizParser(TokenStream input, QuizGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "QuizGame";	
   	}
   	
   	@Override
   	protected QuizGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleQuizGame
entryRuleQuizGame returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQuizGameRule()); }
	 iv_ruleQuizGame=ruleQuizGame 
	 { $current=$iv_ruleQuizGame.current; } 
	 EOF 
;

// Rule QuizGame
ruleQuizGame returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='quizGame' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getQuizGameAccess().getQuizGameKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getQuizGameAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQuizGameRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='by' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getQuizGameAccess().getByKeyword_2());
    }
(
(
		lv_author_3_0=RULE_ID
		{
			newLeafNode(lv_author_3_0, grammarAccess.getQuizGameAccess().getAuthorIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQuizGameRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"author",
        		lv_author_3_0, 
        		"ID");
	    }

)
)	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getQuizGameAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQuizGameAccess().getElementsQuizParserRuleCall_5_0()); 
	    }
		lv_elements_5_0=ruleQuiz		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuizGameRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_5_0, 
        		"Quiz");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getQuizGameAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleQuiz
entryRuleQuiz returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQuizRule()); }
	 iv_ruleQuiz=ruleQuiz 
	 { $current=$iv_ruleQuiz.current; } 
	 EOF 
;

// Rule Quiz
ruleQuiz returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getQuizAccess().getTypeTypeEnumRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuizRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='question' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getQuizAccess().getQuestionKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getQuizAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQuizRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getQuizAccess().getLeftCurlyBracketKeyword_3());
    }
	otherlv_4='text' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getQuizAccess().getTextKeyword_4());
    }
	otherlv_5=':' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getQuizAccess().getColonKeyword_5());
    }
(
(
		lv_text_6_0=RULE_STRING
		{
			newLeafNode(lv_text_6_0, grammarAccess.getQuizAccess().getTextSTRINGTerminalRuleCall_6_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQuizRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"text",
        		lv_text_6_0, 
        		"STRING");
	    }

)
)	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getQuizAccess().getSemicolonKeyword_7());
    }
	otherlv_8='score' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getQuizAccess().getScoreKeyword_8());
    }
	otherlv_9=':' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getQuizAccess().getColonKeyword_9());
    }
(
(
		lv_score_10_0=RULE_INT
		{
			newLeafNode(lv_score_10_0, grammarAccess.getQuizAccess().getScoreINTTerminalRuleCall_10_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQuizRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"score",
        		lv_score_10_0, 
        		"INT");
	    }

)
)	otherlv_11=';' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getQuizAccess().getSemicolonKeyword_11());
    }
	otherlv_12='choices' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getQuizAccess().getChoicesKeyword_12());
    }
	otherlv_13='{' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getQuizAccess().getLeftCurlyBracketKeyword_13());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQuizAccess().getElementsChoiceParserRuleCall_14_0()); 
	    }
		lv_elements_14_0=ruleChoice		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuizRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_14_0, 
        		"Choice");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_15='}' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getQuizAccess().getRightCurlyBracketKeyword_15());
    }
(	otherlv_16='hint' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getQuizAccess().getHintKeyword_16_0());
    }
	otherlv_17=':' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getQuizAccess().getColonKeyword_16_1());
    }
(
(
		lv_hint_18_0=RULE_STRING
		{
			newLeafNode(lv_hint_18_0, grammarAccess.getQuizAccess().getHintSTRINGTerminalRuleCall_16_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQuizRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"hint",
        		lv_hint_18_0, 
        		"STRING");
	    }

)
)	otherlv_19=';' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getQuizAccess().getSemicolonKeyword_16_3());
    }
)?	otherlv_20='}' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getQuizAccess().getRightCurlyBracketKeyword_17());
    }
)
;





// Entry rule entryRuleChoice
entryRuleChoice returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChoiceRule()); }
	 iv_ruleChoice=ruleChoice 
	 { $current=$iv_ruleChoice.current; } 
	 EOF 
;

// Rule Choice
ruleChoice returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_text_0_0=RULE_STRING
		{
			newLeafNode(lv_text_0_0, grammarAccess.getChoiceAccess().getTextSTRINGTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getChoiceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"text",
        		lv_text_0_0, 
        		"STRING");
	    }

)
)	otherlv_1='->' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getChoiceAccess().getHyphenMinusGreaterThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getChoiceAccess().getCorrectBoolParserRuleCall_2_0()); 
	    }
		lv_correct_2_0=ruleBool		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChoiceRule());
	        }
       		set(
       			$current, 
       			"correct",
        		lv_correct_2_0, 
        		"Bool");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getChoiceAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleBool
entryRuleBool returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBoolRule()); } 
	 iv_ruleBool=ruleBool 
	 { $current=$iv_ruleBool.current.getText(); }  
	 EOF 
;

// Rule Bool
ruleBool returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='true' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBoolAccess().getTrueKeyword_0()); 
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBoolAccess().getFalseKeyword_1()); 
    }
)
    ;





// Rule Type
ruleType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='multiChoice' 
	{
        $current = grammarAccess.getTypeAccess().getMultiChoiceEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getTypeAccess().getMultiChoiceEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='singleChoice' 
	{
        $current = grammarAccess.getTypeAccess().getSingleChoiceEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getTypeAccess().getSingleChoiceEnumLiteralDeclaration_1()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


